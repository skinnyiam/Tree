==>> Minimum Depth of Binary Tree :

Code:
    int minDepth(TreeNode* root) {

        queue<pair<TreeNode*,int>> q;
        q.push({root,1});
        while(!q.empty()){
            auto item=q.front();
            TreeNode* node = item.first;
            int depth=item.second;
            q.pop();
            if(node==NULL) continue;
            if(node->left==NULL && node->right==NULL){
                return depth;
            }
            q.push({node->left,depth+1});
                        q.push({node->right,depth+1});

        }
        return 0;
}

Crux:
we iterate through every node level wise and maintain an counter which will increase after every push of the nodes in left and right and if we get node->left null 
node->right null we stop and return to function.

===>>Binary Tree Right Side View

Code :
      vector<int> rightSideView(TreeNode* root) {
        vector<int> ans;
        if(root==NULL) return ans;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int size=q.size();
            for(int i=0;i<size;i++){
                TreeNode* curr= q.front();
                q.pop();
                if(i==size-1)
                {
                    ans.push_back(curr->val);
                }
                if(curr->left!=NULL) q.push(curr->left);
                if(curr->right!=NULL) q.push(curr->right);
            }
        }
        return ans;
    }
    
  Crux : 
  we iterate through every node level wise and take the size of queue and push only last element of queue this way will get the right view of the tree.
  
  
  ===>> Maximum depth / height of the tree
  
  Code :
            int maxdepth(root){
            if(root==NULL) return 0;
            int lh = maxdepth(root->left);
            int rh= maxdepth(root->right);
            
            return 1+max(lh+rh);
            }
       Crux : at every node go to left as possible and go to right and give their left height and right height and add 1 because node should also add
       and hence this way recursively you get the answer .
       TC O(n) ;
       
   ===>> Balanced binary tree
   
   code :
    int height(TreeNode* root){
        if(root==NULL) return 0;
        int lh=height(root->left);
            if(lh==-1) return -1;
        int rh=height(root->right);
            if(rh==-1) return -1;
        
        if(abs(lh-rh)>1) return -1;
        return max(rh,lh)+1;
        
    }
    
    bool isBalanced(TreeNode* root) {
        return height(root)!=-1;
    }
    
    first we compute height of evry node and we know that for balanced tree every node should have their difference between lh and rh should not have more than 1 
    so at every time if the node value is gretaer than 1 we return -1 or if the height of lh or rh is -1 we return -1 in this way we check for balanced binary
    tree.
